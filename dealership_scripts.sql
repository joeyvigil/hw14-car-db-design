-- INSERT data generated by chatGPT

-- DROP
DROP TABLE IF EXISTS salespersons;
DROP TABLE IF EXISTS customers;
DROP TABLE IF EXISTS cars;
DROP TABLE IF EXISTS mechanics;

DROP TABLE IF EXISTS invoices;
DROP TABLE IF EXISTS service_tickets;
DROP TABLE IF EXISTS service_mechanics;

-- CREATE
CREATE TABLE salespersons (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  first VARCHAR(255) NOT NULL,
  last VARCHAR(255) NOT NULL,
  phone VARCHAR(255),
  account_num INTEGER,
  updated_at timestamp DEFAULT current_timestamp
);

CREATE TABLE customers (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  first VARCHAR(255) NOT NULL,
  last VARCHAR(255) NOT NULL,
  phone VARCHAR(255),
  account_num INTEGER,
  updated_at timestamp DEFAULT current_timestamp
);

CREATE TABLE cars (
  serial_id VARCHAR(255) PRIMARY KEY,
  make VARCHAR(255),
  model VARCHAR(255),
  year INTEGER,
  color VARCHAR(255),
  updated_at timestamp DEFAULT current_timestamp
);

CREATE TABLE mechanics (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  first VARCHAR(255) NOT NULL,
  last VARCHAR(255) NOT NULL,
  phone VARCHAR(255),
  account_num INTEGER,
  updated_at timestamp DEFAULT current_timestamp
);

CREATE TABLE invoices (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  salesperson_id INTEGER NOT NULL,
  cust_id INTEGER NOT NULL,
  car_serial_id VARCHAR(255) NOT NULL,
  cost money NOT NULL,
  updated_at timestamp DEFAULT current_timestamp,
  FOREIGN KEY (salesperson_id) REFERENCES salespersons(id) ON DELETE CASCADE,
  FOREIGN KEY (cust_id) REFERENCES customers(id) ON DELETE CASCADE,
  FOREIGN KEY (car_serial_id) REFERENCES cars(serial_id) ON DELETE CASCADE
);

CREATE TABLE service_tickets (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  cust_id INTEGER NOT NULL,
  car_serial_id INTEGER NOT NULL,
  service_type VARCHAR(255) NOT NULL,
  cost money NOT NULL,
  updated_at timestamp DEFAULT current_timestamp,
  FOREIGN KEY (cust_id) REFERENCES customers(id) ON DELETE CASCADE,
  FOREIGN KEY (car_serial_id) REFERENCES cars(serial_id) ON DELETE CASCADE
);

CREATE TABLE service_mechanics (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  service_id INTEGER,
  mechanic_id INTEGER,
  FOREIGN KEY (service_id) REFERENCES service_tickets(id) ON DELETE CASCADE,
  FOREIGN KEY (mechanic_id) REFERENCES mechanics(id) ON DELETE CASCADE
);


--INSERT

INSERT INTO salespersons (`first`, `last`, phone, account_num, updated_at)
VALUES 
  ('Laura', 'Nguyen', '555-234-7890', '491028', '2025-07-15 14:32:10'),
  ('Jamal', 'Roberts', '555-879-2345', '502193', '2025-06-28 09:15:27'),
  ('Erika', 'Silva', '555-342-1902', '473812', '2025-07-02 17:48:55'),
  ('Chris', 'Mendoza', '555-664-8720', '499721', '2025-08-01 10:01:44'),
  ('Priya', 'Patel', '555-891-0034', '518200', '2025-07-21 13:22:10'),
  ('Daniel', 'Chen', '555-210-3987', '455982', '2025-07-12 08:44:19'),
  ('Maria', 'Lopez', '555-784-3210', '500173', '2025-07-30 11:09:33'),
  ('James', 'O Connor', '555-390-1268', '511999', '2025-06-25 16:40:00'),
  ('Ashley', 'Young', '555-675-4523', '489233', '2025-07-05 19:12:47'),
  ('Omar', 'Hassan', '555-612-9470', '495674', '2025-07-29 07:56:22');

INSERT INTO customers (first, last, phone, account_num, updated_at)
VALUES
  ('Ava', 'Morgan', '555-102-3344', '102938', '2025-07-30 11:23:45'),
  ('Ethan', 'Reed', '555-293-8475', '384729', '2025-06-22 09:17:02'),
  ('Lily', 'Chavez', '555-839-1029', '192837', '2025-07-15 14:55:10'),
  ('Noah', 'Foster', '555-672-3458', '847362', '2025-08-01 08:03:50'),
  ('Zoe', 'Turner', '555-918-2231', '564738', '2025-07-19 10:21:37'),
  ('Mason', 'Kim', '555-480-9123', '748291', '2025-06-27 16:44:29'),
  ('Isabella', 'Wells', '555-324-7781', '998211', '2025-07-25 13:59:48'),
  ('Logan', 'Bishop', '555-110-4455', '228374', '2025-07-12 07:33:14'),
  ('Chloe', 'Sanders', '555-900-2837', '567120', '2025-07-05 18:15:00'),
  ('Elijah', 'Ng', '555-752-3048', '445566', '2025-07-28 12:05:27');

INSERT INTO cars (serial_id, make, model, year, color, updated_at) VALUES
  ('1HGFA16526L000001', 'Honda', 'Civic', 2020, 'Red', '2025-07-30 11:03:22'),
  ('2T1BURHE6JC000002', 'Toyota', 'Corolla', 2019, 'Blue', '2025-07-25 09:14:11'),
  ('3FA6P0H71HR000003', 'Ford', 'Fusion', 2018, 'White', '2025-07-28 13:45:30'),
  ('1N4AL3AP1GC000004', 'Nissan', 'Altima', 2021, 'Gray', '2025-07-31 16:22:44'),
  ('5YJSA1E23HF000005', 'Tesla', 'Model S', 2023, 'Black', '2025-08-01 08:33:57'),
  ('1FTFW1EF1EFA00006', 'Ford', 'F-150', 2022, 'Green', '2025-07-22 17:02:09'),
  ('WBA3A5C59DF000007', 'BMW', '320i', 2017, 'Silver', '2025-07-20 12:28:33'),
  ('JHMGE8H58DC000008', 'Honda', 'Fit', 2016, 'Yellow', '2025-07-26 10:00:00'),
  ('WA1LAAF70KD000009', 'Audi', 'Q7', 2021, 'White', '2025-07-29 14:17:49'),
  ('1C4PJLCB6FW000010', 'Jeep', 'Cherokee', 2020, 'Orange', '2025-07-18 15:49:10');

INSERT INTO mechanics (first, last, phone, account_num, updated_at) VALUES
  ('Miguel', 'Santiago', '555-102-3847', 100234, '2025-07-30 09:45:21'),
  ('Jenna', 'Holmes', '555-839-0021', 100235, '2025-07-28 11:32:10'),
  ('Isaac', 'Thompson', '555-203-8493', 100236, '2025-08-01 08:15:44'),
  ('Kaitlyn', 'Reeves', '555-672-9001', 100237, '2025-07-20 14:50:36'),
  ('Trevor', 'Nguyen', '555-748-1210', 100238, '2025-07-26 10:05:59'),
  ('Alonzo', 'Carter', '555-980-6743', 100239, '2025-07-19 13:41:08'),
  ('Bianca', 'Torres', '555-445-7182', 100240, '2025-07-22 16:03:00'),
  ('Elliot', 'Price', '555-110-2983', 100241, '2025-07-18 17:47:12'),
  ('Diana', 'Kim', '555-728-1992', 100242, '2025-07-31 12:34:28'),
  ('Ruben', 'Lopez', '555-661-7734', 100243, '2025-07-25 15:12:47');

INSERT INTO invoices (salesperson_id, cust_id, car_serial_id, cost, updated_at) VALUES
  (3, 1, '1HGFA16526L000001', 23450.00, '2025-07-30 12:30:00'),
  (1, 5, '2T1BURHE6JC000002', 18999.99, '2025-07-29 15:22:10'),
  (6, 2, '3FA6P0H71HR000003', 21000.00, '2025-07-31 09:17:33'),
  (9, 1, '1N4AL3AP1GC000004', 24500.50, '2025-07-28 10:55:20'),
  (4, 4, '5YJSA1E23HF000005', 55000.00, '2025-08-01 08:00:00'),
  (2, 10, '1FTFW1EF1EFA00006', 32500.75, '2025-07-27 13:12:45'),
  (1, 8, 'WBA3A5C59DF000007', 27800.00, '2025-07-26 17:33:11'),
  (7, 3, 'JHMGE8H58DC000008', 16500.00, '2025-07-25 11:29:59'),
  (5, 6, 'WA1LAAF70KD000009', 44000.00, '2025-07-24 16:45:05'),
  (2, 1, '1C4PJLCB6FW000010', 31000.00, '2025-07-23 14:15:27');

INSERT INTO service_tickets (cust_id, car_serial_id, service_type, cost, updated_at) VALUES
  (2, '1HGFA16526L000001', 'Oil Change', 59.99, '2025-07-30 10:00:00'),
  (5, '2T1BURHE6JC000002', 'Tire Rotation', 49.99, '2025-07-28 12:30:22'),
  (7, '3FA6P0H71HR000003', 'Brake Inspection', 89.00, '2025-07-25 14:12:10'),
  (1, '1N4AL3AP1GC000004', 'Engine Diagnostic', 120.00, '2025-08-01 09:45:50'),
  (9, '5YJSA1E23HF000005', 'Battery Replacement', 189.99, '2025-07-29 08:10:37'),
  (6, '1FTFW1EF1EFA00006', 'Transmission Flush', 249.99, '2025-07-22 11:25:18'),
  (4, 'WBA3A5C59DF000007', 'Air Filter Replacement', 35.00, '2025-07-26 13:05:03'),
  (10, 'JHMGE8H58DC000008', 'Coolant Flush', 99.99, '2025-07-23 16:50:00'),
  (3, 'WA1LAAF70KD000009', 'Wheel Alignment', 89.50, '2025-07-27 10:40:42'),
  (8, '1C4PJLCB6FW000010', 'Spark Plug Replacement', 130.00, '2025-07-31 15:22:15'),
  (1, '1HGFA16526L000001', 'Oil Change', 59.99, '2025-07-21 09:00:00'),
  (6, '2T1BURHE6JC000002', 'Tire Rotation', 49.99, '2025-07-19 10:12:45'),
  (2, '3FA6P0H71HR000003', 'Brake Inspection', 85.00, '2025-07-28 12:34:21'),
  (10, '1N4AL3AP1GC000004', 'Engine Diagnostic', 110.00, '2025-07-30 14:18:09'),
  (5, '5YJSA1E23HF000005', 'Battery Replacement', 175.00, '2025-07-20 17:03:55'),
  (8, '1FTFW1EF1EFA00006', 'Transmission Flush', 260.00, '2025-07-18 11:11:11'),
  (3, 'WBA3A5C59DF000007', 'Air Filter Replacement', 40.00, '2025-07-16 13:56:44'),
  (4, 'JHMGE8H58DC000008', 'Coolant Flush', 95.00, '2025-07-24 16:29:30'),
  (7, 'WA1LAAF70KD000009', 'Wheel Alignment', 92.00, '2025-07-22 12:12:12'),
  (9, '1C4PJLCB6FW000010', 'Spark Plug Replacement', 135.00, '2025-07-29 15:45:17');

INSERT INTO service_mechanics (service_id, mechanic_id) VALUES
  (1, 3),
  (2, 5),
  (3, 1),
  (4, 4),
  (5, 7),
  (6, 2),
  (7, 6),
  (8, 8),
  (9, 3),
  (10, 9),
  (2, 6),
  (3, 2),
  (4, 3),
  (5, 5),
  (6, 1);


-- test -- create a table that shows which mechanics worked the most jobs
-- SELECT m.first,m.last, count(*)
-- FROM service_mechanics sm
-- JOIN service_tickets st ON  st.id =sm.service_id 
-- JOIN mechanics m ON m.id = sm.mechanic_id
-- GROUP BY  m.first,m.last
-- ORDER BY count(*) DESC
-- ;